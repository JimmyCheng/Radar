<?xml version="1.0" encoding="UTF-8"?>

<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- Uncomment if you are trying to use a Resin version before 3.0.19. Their XML implementation isn't entirely compatible with Xerces. Below are the implementations to use with Sun's JVM. <system-property 
		javax.xml.xpath.XPathFactory= "com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl"/> <system-property javax.xml.parsers.DocumentBuilderFactory= "com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl"/> 
		<system-property javax.xml.parsers.SAXParserFactory= "com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl"/> -->

	<display-name>CodeRadar</display-name>
	
	<!-- root context -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:svnContext.xml, classpath:solrContext.xml,classpath:applicationContext.xml</param-value>
	</context-param>
	
	<!-- log4j configureation -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>CodeRadar.root</param-value>
	</context-param>
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:/log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>3000</param-value>
	</context-param>
	
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Any path (name) registered in solrconfig.xml will be sent to that filter -->
	<filter>
		<filter-name>SolrRequestFilter</filter-name>
		<filter-class>org.apache.solr.servlet.SolrDispatchFilter</filter-class>
		<!-- If you are wiring Solr into a larger web application which controls the web context root, you will probably want to mount Solr under a path prefix (app.war with /app/solr mounted into it, for example). 
			You will need to put this prefix in front of the SolrDispatchFilter url-pattern mapping too (/solr/*), and also on any paths for legacy Solr servlet mappings you may be using. For the admin JSP's to work 
			properly in a path-prefixed configuration, the admin folder containing the JSPs needs to be under the app context root named to match the path-prefix. For example: .war xxx admin stats.jsp -->
		<!-- <init-param> <param-name>path-prefix</param-name> <param-value>/xxx</param-value> </init-param> -->
		<init-param> 
		     <param-name>path-prefix</param-name> 
		     <param-value>/solr</param-value> 
	    </init-param>
		
	</filter>

	<filter-mapping>
		<!-- NOTE: When using multicore, /admin JSP URLs with a core specified such as /solr/coreName/admin/stats.jsp get forwarded by a RequestDispatcher to /solr/admin/stats.jsp with the specified core put 
			into request scope keyed as "org.apache.solr.SolrCore". It is unnecessary, and potentially problematic, to have the SolrDispatchFilter configured to also filter on forwards. Do not configure this dispatcher 
			as <dispatcher>FORWARD</dispatcher>. -->
		<filter-name>SolrRequestFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<listener>
		<listener-class>com.coderadar.env.EnvContextListener</listener-class>
	</listener>

	<!-- for spring -->
	<servlet>
		<servlet-name>spring-ws</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring-ws-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring-ws</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>
